import os
import json
import asyncio
from datetime import datetime, timedelta
from typing import Dict, List, Optional
from dataclasses import dataclass, asdict
import logging

# Cargar variables de entorno
from dotenv import load_dotenv
load_dotenv()

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters

# Configurar logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# Verificar variables de entorno
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')

if not TELEGRAM_BOT_TOKEN:
    logger.error("‚ùå TELEGRAM_BOT_TOKEN no est√° configurado en el archivo .env")
    exit(1)

@dataclass
class Doctor:
    id: int
    name: str
    specialty: str
    available: bool = True

@dataclass
class AppointmentData:
    owner_name: Optional[str] = None
    pet_name: Optional[str] = None
    pet_type: Optional[str] = None
    appointment_type: Optional[str] = None
    selected_doctor: Optional[str] = None
    selected_doctor_id: Optional[int] = None
    selected_date: Optional[str] = None
    selected_time: Optional[str] = None

@dataclass
class ConversationState:
    step: str = "greeting"
    data: AppointmentData = None
    
    def __post_init__(self):
        if self.data is None:
            self.data = AppointmentData()

# Base de datos simulada
doctors = [
    Doctor(1, "Dr. Mar√≠a Gonz√°lez", "Medicina General"),
    Doctor(2, "Dr. Carlos Rodr√≠guez", "Cirug√≠a"),
    Doctor(3, "Dr. Ana Mart√≠nez", "Dermatolog√≠a"),
    Doctor(4, "Dr. Luis Fern√°ndez", "Cardiolog√≠a"),
    Doctor(5, "Dr. Patricia Morales", "Oftalmolog√≠a"),
    Doctor(6, "Dr. Roberto Silva", "Traumatolog√≠a"),
]

# Tipos de citas disponibles
appointment_types = [
    {"id": "consulta_general", "name": "Consulta General", "description": "Revisi√≥n m√©dica general"},
    {"id": "vacunacion", "name": "Vacunaci√≥n", "description": "Aplicaci√≥n de vacunas"},
    {"id": "cirugia", "name": "Cirug√≠a", "description": "Procedimientos quir√∫rgicos"},
    {"id": "emergencia", "name": "Emergencia", "description": "Atenci√≥n de urgencia"},
    {"id": "control", "name": "Control Post-operatorio", "description": "Seguimiento despu√©s de cirug√≠a"},
    {"id": "dermatologia", "name": "Dermatolog√≠a", "description": "Problemas de piel y pelo"},
    {"id": "oftalmologia", "name": "Oftalmolog√≠a", "description": "Problemas oculares"},
    {"id": "traumatologia", "name": "Traumatolog√≠a", "description": "Lesiones y fracturas"},
]

appointments = []
conversation_states: Dict[int, ConversationState] = {}

# Recomendaciones predefinidas por tipo de mascota y cita
RECOMMENDATIONS_DATABASE = {
    ("perro", "Consulta General"): """
üéí **Preparaci√≥n y qu√© traer:**
‚Ä¢ Cartilla de vacunaci√≥n actualizada
‚Ä¢ Correa y collar seguros
‚Ä¢ Lista de medicamentos actuales
‚Ä¢ Muestra de heces reciente (si es posible)

üêæ **Cuidados previos con la mascota:**
‚Ä¢ Mant√©n su rutina normal de alimentaci√≥n
‚Ä¢ Ejercicio ligero antes de la cita
‚Ä¢ Ba√±o 2-3 d√≠as antes (no el mismo d√≠a)

‚ö†Ô∏è **Se√±ales de alerta a observar:**
‚Ä¢ Cambios en apetito o comportamiento
‚Ä¢ V√≥mitos o diarrea
‚Ä¢ Letargo inusual
‚Ä¢ Dificultad para respirar

üí° **Consejos para reducir estr√©s:**
‚Ä¢ Llega 10 minutos antes de la cita
‚Ä¢ Mant√©n calma y confianza
‚Ä¢ Trae su juguete favorito
‚Ä¢ Usa refuerzo positivo con premios

üìù **Informaci√≥n importante para el veterinario:**
‚Ä¢ Cambios recientes en comportamiento
‚Ä¢ Historial de enfermedades previas
‚Ä¢ Reacciones a medicamentos
‚Ä¢ H√°bitos alimenticios y de ejercicio
    """,
    
    ("perro", "Vacunaci√≥n"): """
üéí **Preparaci√≥n y qu√© traer:**
‚Ä¢ Cartilla de vacunaci√≥n anterior
‚Ä¢ Correa resistente y collar con identificaci√≥n
‚Ä¢ Premios peque√±os para recompensar
‚Ä¢ Historial de reacciones al√©rgicas (si las hay)

üêæ **Cuidados previos con la mascota:**
‚Ä¢ Aseg√∫rate de que est√© completamente sano
‚Ä¢ No ba√±es 24 horas antes
‚Ä¢ Alimentaci√≥n normal hasta 2 horas antes
‚Ä¢ Evita ejercicio intenso el d√≠a anterior

‚ö†Ô∏è **Se√±ales de alerta a observar:**
‚Ä¢ Fiebre o temperatura elevada
‚Ä¢ V√≥mitos o diarrea recientes
‚Ä¢ Letargo o debilidad
‚Ä¢ Reacciones al√©rgicas previas a vacunas

üí° **Consejos para reducir estr√©s:**
‚Ä¢ Socializaci√≥n previa con otros perros
‚Ä¢ Mant√©n rutina normal antes de la cita
‚Ä¢ Usa transport√≠n si es un cachorro
‚Ä¢ Evita lugares con muchos animales antes

üìù **Informaci√≥n importante para el veterinario:**
‚Ä¢ Fecha de √∫ltima vacunaci√≥n
‚Ä¢ Reacciones adversas anteriores
‚Ä¢ Medicamentos actuales
‚Ä¢ Exposici√≥n a otros animales enfermos
    """,
    
    ("gato", "Consulta General"): """
üéí **Preparaci√≥n y qu√© traer:**
‚Ä¢ Transport√≠n seguro y c√≥modo
‚Ä¢ Cartilla de vacunaci√≥n
‚Ä¢ Manta familiar para reducir estr√©s
‚Ä¢ Muestra de orina si es posible

üêæ **Cuidados previos con la mascota:**
‚Ä¢ Mant√©n en casa 24 horas antes
‚Ä¢ No cambies su dieta
‚Ä¢ Limpia la caja de arena
‚Ä¢ Observa comportamiento y apetito

‚ö†Ô∏è **Se√±ales de alerta a observar:**
‚Ä¢ Cambios en uso de caja de arena
‚Ä¢ P√©rdida de apetito
‚Ä¢ Esconderse m√°s de lo normal
‚Ä¢ Vocalizaci√≥n excesiva

üí° **Consejos para reducir estr√©s:**
‚Ä¢ Usa feromonas calmantes en transport√≠n
‚Ä¢ Cubre el transport√≠n con manta
‚Ä¢ Evita ruidos fuertes durante traslado
‚Ä¢ Mant√©n temperatura estable

üìù **Informaci√≥n importante para el veterinario:**
‚Ä¢ H√°bitos de caja de arena
‚Ä¢ Comportamiento social con otros gatos
‚Ä¢ Preferencias alimenticias
‚Ä¢ Lugares favoritos para esconderse
    """,
    
    ("gato", "Vacunaci√≥n"): """
üéí **Preparaci√≥n y qu√© traer:**
‚Ä¢ Transport√≠n con ventilaci√≥n adecuada
‚Ä¢ Cartilla de vacunaci√≥n completa
‚Ä¢ Toalla o manta familiar
‚Ä¢ Lista de medicamentos actuales

üêæ **Cuidados previos con la mascota:**
‚Ä¢ Mant√©n en ayunas 12 horas antes si es necesario
‚Ä¢ Observa comportamiento 48 horas previas
‚Ä¢ Evita estr√©s adicional en casa
‚Ä¢ Mant√©n rutina de juego normal

‚ö†Ô∏è **Se√±ales de alerta a observar:**
‚Ä¢ Fiebre o letargo
‚Ä¢ P√©rdida de apetito
‚Ä¢ V√≥mitos o diarrea
‚Ä¢ Comportamiento agresivo inusual

üí° **Consejos para reducir estr√©s:**
‚Ä¢ Acostumbra al transport√≠n d√≠as antes
‚Ä¢ Usa spray de feromonas
‚Ä¢ Mant√©n viaje corto y suave
‚Ä¢ Habla con voz calmada

üìù **Informaci√≥n importante para el veterinario:**
‚Ä¢ Reacciones a vacunas anteriores
‚Ä¢ Contacto con gatos callejeros
‚Ä¢ Vida interior vs exterior
‚Ä¢ Cambios recientes en comportamiento
    """,
    
    ("conejo", "Consulta General"): """
üéí **Preparaci√≥n y qu√© traer:**
‚Ä¢ Transport√≠n con base s√≥lida
‚Ä¢ Heno fresco y pellets
‚Ä¢ Historial m√©dico completo
‚Ä¢ Muestra de heces recientes

üêæ **Cuidados previos con la mascota:**
‚Ä¢ Mant√©n dieta constante
‚Ä¢ Observa producci√≥n de cec√≥trofos
‚Ä¢ Revisa dientes y u√±as
‚Ä¢ Pesa regularmente

‚ö†Ô∏è **Se√±ales de alerta a observar:**
‚Ä¢ Disminuci√≥n en producci√≥n de heces
‚Ä¢ P√©rdida de apetito
‚Ä¢ Letargo o inactividad
‚Ä¢ Problemas dentales

üí° **Consejos para reducir estr√©s:**
‚Ä¢ Transport√≠n con material familiar
‚Ä¢ Evita cambios bruscos de temperatura
‚Ä¢ Mant√©n ambiente tranquilo
‚Ä¢ No manipules excesivamente

üìù **Informaci√≥n importante para el veterinario:**
‚Ä¢ Dieta espec√≠fica y cantidad
‚Ä¢ H√°bitos de ejercicio
‚Ä¢ Interacci√≥n con otros conejos
‚Ä¢ Historial reproductivo
    """,
}

def get_available_dates() -> List[Dict]:
    """Obtiene las pr√≥ximas 3 fechas de d√≠as h√°biles"""
    dates = []
    today = datetime.now()
    business_days = 0
    current_date = today
    
    while business_days < 3:
        current_date += timedelta(days=1)
        if current_date.weekday() < 5:
            dates.append({
                'date': current_date.strftime('%Y-%m-%d'),
                'display_date': current_date.strftime('%A, %d de %B de %Y'),
                'slots': ['09:00', '10:00', '11:00', '14:00', '15:00', '16:00']
            })
            business_days += 1
    
    return dates

def get_appointment_recommendations(pet_type: str, appointment_type: str) -> str:
    """Obtiene recomendaciones predefinidas basadas en tipo de mascota y cita"""
    
    # Buscar recomendaci√≥n espec√≠fica
    key = (pet_type.lower(), appointment_type)
    if key in RECOMMENDATIONS_DATABASE:
        return RECOMMENDATIONS_DATABASE[key]
    
    # Buscar por tipo de mascota general
    general_keys = [k for k in RECOMMENDATIONS_DATABASE.keys() if k[0] == pet_type.lower()]
    if general_keys:
        return RECOMMENDATIONS_DATABASE[general_keys[0]]
    
    # Recomendaci√≥n gen√©rica
    return f"""
üéí **Preparaci√≥n general para {pet_type}:**
‚Ä¢ Trae cartilla de vacunaci√≥n
‚Ä¢ Transport√≠n o correa segura
‚Ä¢ Lista de medicamentos actuales
‚Ä¢ Historial m√©dico disponible

üêæ **Cuidados previos:**
‚Ä¢ Mant√©n rutina normal de alimentaci√≥n
‚Ä¢ Observa comportamiento 24h antes
‚Ä¢ Evita estr√©s adicional
‚Ä¢ Aseg√∫rate de que est√© hidratado

‚ö†Ô∏è **Se√±ales de alerta:**
‚Ä¢ Cambios en apetito
‚Ä¢ Letargo inusual
‚Ä¢ V√≥mitos o diarrea
‚Ä¢ Comportamiento anormal

üí° **Consejos generales:**
‚Ä¢ Llega puntual a la cita
‚Ä¢ Mant√©n calma durante la visita
‚Ä¢ Prepara preguntas para el veterinario
‚Ä¢ Trae m√©todo de pago

üìù **Informaci√≥n importante:**
‚Ä¢ S√≠ntomas actuales
‚Ä¢ Medicamentos en uso
‚Ä¢ Cambios recientes
‚Ä¢ Preguntas espec√≠ficas
    """

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Comando /start"""
    chat_id = update.effective_chat.id
    conversation_states[chat_id] = ConversationState()
    
    welcome_message = """
üè• ¬°Bienvenido a PetHealth! 

Soy tu asistente virtual y estoy aqu√≠ para ayudarte a agendar una cita para tu mascota.

Te proporcionar√© recomendaciones personalizadas basadas en el tipo de cita y tu mascota.

Para comenzar, por favor dime tu nombre completo.
    """
    
    await update.message.reply_text(welcome_message)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Maneja los mensajes de texto"""
    chat_id = update.effective_chat.id
    user_message = update.message.text
    
    if chat_id not in conversation_states:
        conversation_states[chat_id] = ConversationState()
    
    state = conversation_states[chat_id]
    
    if state.step == "greeting":
        state.data.owner_name = user_message
        state.step = "ask_pet_name"
        response = f"Mucho gusto, {user_message}! üôÇ\n\n¬øC√≥mo se llama tu mascota?"
        
    elif state.step == "ask_pet_name":
        state.data.pet_name = user_message
        state.step = "ask_pet_type"
        response = f"¬°Qu√© lindo nombre! ¬øQu√© tipo de mascota es {user_message}?\n\n(Por ejemplo: perro, gato, conejo, etc.)"
        
    elif state.step == "ask_pet_type":
        state.data.pet_type = user_message
        state.step = "ask_appointment_type"
        response = f"Perfecto! {state.data.pet_name} es un {user_message} muy especial. üêæ\n\n¬øQu√© tipo de cita necesitas?"
        
        # Mostrar tipos de citas
        keyboard = []
        for apt_type in appointment_types:
            keyboard.append([InlineKeyboardButton(
                f"{apt_type['name']}", 
                callback_data=f"apt_type_{apt_type['id']}"
            )])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(response, reply_markup=reply_markup)
        return
        
    else:
        response = "Por favor, usa los botones para continuar con el proceso de agendamiento."
    
    await update.message.reply_text(response)

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Maneja los callbacks de los botones"""
    query = update.callback_query
    await query.answer()
    
    chat_id = query.message.chat_id
    callback_data = query.data
    
    if chat_id not in conversation_states:
        await query.edit_message_text("Error: Sesi√≥n expirada. Usa /start para comenzar de nuevo.")
        return
    
    state = conversation_states[chat_id]
    
    if callback_data.startswith("apt_type_"):
        appointment_type_id = callback_data.split("_", 2)[2]
        appointment_type_info = next((apt for apt in appointment_types if apt['id'] == appointment_type_id), None)
        
        if appointment_type_info:
            state.data.appointment_type = appointment_type_info['name']
            state.step = "show_recommendations"
            
            # Generar recomendaciones predefinidas
            recommendations = get_appointment_recommendations(
                state.data.pet_type, 
                appointment_type_info['name']
            )
            
            response = f"""
‚úÖ **Tipo de cita seleccionada:** {appointment_type_info['name']}

üìã **Recomendaciones personalizadas para {state.data.pet_name}:**

{recommendations}

---

¬øEst√°s listo para continuar con la selecci√≥n del doctor?
            """
            
            # Bot√≥n para continuar
            keyboard = [[InlineKeyboardButton("Continuar con doctores", callback_data="continue_doctors")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(response, reply_markup=reply_markup)
    
    elif callback_data == "continue_doctors":
        state.step = "show_doctors"
        
        response = "Ahora selecciona uno de nuestros doctores disponibles:"
        
        # Mostrar doctores
        keyboard = []
        for doctor in doctors:
            if doctor.available:
                keyboard.append([InlineKeyboardButton(
                    f"{doctor.name} - {doctor.specialty}", 
                    callback_data=f"doctor_{doctor.id}"
                )])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(response, reply_markup=reply_markup)
    
    elif callback_data.startswith("doctor_"):
        doctor_id = int(callback_data.split("_")[1])
        doctor = next((d for d in doctors if d.id == doctor_id), None)
        
        if doctor:
            state.data.selected_doctor = doctor.name
            state.data.selected_doctor_id = doctor_id
            state.step = "show_dates"
            
            response = f"Has seleccionado a {doctor.name} ({doctor.specialty}) üë®‚Äç‚öïÔ∏è\n\nAhora elige una fecha disponible:"
            
            dates = get_available_dates()
            keyboard = []
            for date_info in dates:
                keyboard.append([InlineKeyboardButton(
                    date_info['display_date'], 
                    callback_data=f"date_{date_info['date']}"
                )])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(response, reply_markup=reply_markup)
    
    elif callback_data.startswith("date_"):
        selected_date = callback_data.split("_")[1]
        dates = get_available_dates()
        date_info = next((d for d in dates if d['date'] == selected_date), None)
        
        if date_info:
            state.data.selected_date = selected_date
            state.step = "show_times"
            
            response = f"Fecha seleccionada: {date_info['display_date']} üìÖ\n\nElige un horario disponible:"
            
            keyboard = []
            for time_slot in date_info['slots']:
                keyboard.append([InlineKeyboardButton(
                    time_slot, 
                    callback_data=f"time_{time_slot}"
                )])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(response, reply_markup=reply_markup)
    
    elif callback_data.startswith("time_"):
        selected_time = callback_data.split("_")[1]
        state.data.selected_time = selected_time
        
        # Crear cita
        appointment = {
            'id': len(appointments) + 1,
            'owner_name': state.data.owner_name,
            'pet_name': state.data.pet_name,
            'pet_type': state.data.pet_type,
            'appointment_type': state.data.appointment_type,
            'doctor_id': state.data.selected_doctor_id,
            'doctor_name': state.data.selected_doctor,
            'date': state.data.selected_date,
            'time': selected_time,
            'created_at': datetime.now().isoformat(),
            'chat_id': chat_id
        }
        
        appointments.append(appointment)
        
        # Limpiar estado
        del conversation_states[chat_id]
        
        # Mensaje de confirmaci√≥n
        confirmation_message = f"""
üéâ ¬°Cita confirmada exitosamente!

üìã **Detalles de la cita:**
üë§ Due√±o: {appointment['owner_name']}
üêæ Mascota: {appointment['pet_name']} ({appointment['pet_type']})
üìù Tipo de cita: {appointment['appointment_type']}
üë®‚Äç‚öïÔ∏è Doctor: {appointment['doctor_name']}
üìÖ Fecha: {datetime.strptime(appointment['date'], '%Y-%m-%d').strftime('%A, %d de %B de %Y')}
üïê Hora: {appointment['time']}
üÜî ID Cita: #{appointment['id']}

üí° **Recordatorio:** Revisa las recomendaciones que te proporcionamos para prepararte mejor para la cita.

Te esperamos en PetHealth. ¬°Gracias por confiar en nosotros! üè•

Para agendar otra cita, usa /start
        """
        
        await query.edit_message_text(confirmation_message)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Comando /help"""
    help_text = """
üè• **PetHealth Bot - Ayuda**

**Comandos disponibles:**
/start - Iniciar proceso de agendamiento
/help - Mostrar esta ayuda
/citas - Ver tus citas programadas
/tipos - Ver tipos de citas disponibles

**¬øC√≥mo funciona?**
1. Usa /start para comenzar
2. Proporciona tu nombre
3. Nombre de tu mascota
4. Tipo de mascota
5. Selecciona tipo de cita
6. Recibe recomendaciones personalizadas
7. Selecciona doctor
8. Elige fecha y hora
9. ¬°Listo! Recibir√°s confirmaci√≥n

**Caracter√≠sticas:**
‚ú® Recomendaciones personalizadas
‚ú® Consejos espec√≠ficos por tipo de mascota y cita
‚ú® Preparaci√≥n previa a la consulta
‚ú® Funciona sin conexi√≥n a internet adicional

**Soporte:**
Si tienes problemas, contacta a nuestro equipo de soporte.
    """
    
    await update.message.reply_text(help_text)

async def appointment_types_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Comando /tipos - Mostrar tipos de citas disponibles"""
    message = "üìã **Tipos de citas disponibles:**\n\n"
    
    for apt_type in appointment_types:
        message += f"üî∏ **{apt_type['name']}**\n   {apt_type['description']}\n\n"
    
    message += "Para agendar una cita, usa /start"
    
    await update.message.reply_text(message)

async def my_appointments(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Comando /citas - Mostrar citas del usuario"""
    chat_id = update.effective_chat.id
    user_appointments = [apt for apt in appointments if apt['chat_id'] == chat_id]
    
    if not user_appointments:
        await update.message.reply_text("No tienes citas programadas. Usa /start para agendar una.")
        return
    
    message = "üìÖ **Tus citas programadas:**\n\n"
    
    for apt in user_appointments:
        date_formatted = datetime.strptime(apt['date'], '%Y-%m-%d').strftime('%d/%m/%Y')
        message += f"""
üÜî Cita #{apt['id']}
üêæ {apt['pet_name']} ({apt['pet_type']})
üìù Tipo: {apt.get('appointment_type', 'No especificado')}
üë®‚Äç‚öïÔ∏è {apt['doctor_name']}
üìÖ {date_formatted} a las {apt['time']}
---
        """
    
    await update.message.reply_text(message)

def main() -> None:
    """Funci√≥n principal"""
    if not TELEGRAM_BOT_TOKEN:
        logger.error("TELEGRAM_BOT_TOKEN no est√° configurado")
        return
    
    # Crear aplicaci√≥n
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
    
    # Agregar handlers
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("citas", my_appointments))
    application.add_handler(CommandHandler("tipos", appointment_types_command))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(CallbackQueryHandler(handle_callback))
    
    # Ejecutar bot
    logger.info("üè• Bot PetHealth iniciado (Versi√≥n Offline)...")
    logger.info("‚úÖ Funcionando con recomendaciones predefinidas")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main()
